#!/usr/bin/env python3
import os, sys
import numpy as np
from h5py import File
import argparse
import numpy.ma as ma
import itertools
# import math

from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure

from delphes import varnames

def _get_args():
    d = 'default: %(default)s'
    c = 'const: %(const)s'
    parser = argparse.ArgumentParser()
    parser.add_argument('input_file')
    parser.add_argument('output_dir', nargs='?', default='highlevel')
    parser.add_argument('-e', '--ext', default='.pdf', help=d)
    parser.add_argument('-p', '--pretty', action='store_true')
    parser.add_argument('-m', '--mid-level', action='store_true')
    args = parser.parse_args()
    return args

_rev_plots = {'drjet', 'jetProb'}
_colors = {
    'jetProb': 'k',
    'lsig': 'gray',
    'track2d0': 'blue',
    'track3d0': 'green',
}
_labels = varnames.labels

_styles = itertools.product(['-','--', ':'], 'rgbcmyk')

def run():
    args = _get_args()
    plots = {}
    with File(args.input_file, 'r') as h5:
        level_hists = h5['med-level' if args.mid_level else 'high-level']
        for ds_name in level_hists['light']:
            light = level_hists['light'][ds_name]
            bottom = level_hists['bottom'][ds_name]
            rev = (ds_name in _rev_plots)
            eff, rej = _get_roc_xy(bottom, light, rev, mineff=0.3)
            if args.pretty:
                color = _colors.get(ds_name)
                style = '-'
            else:
                style, color = next(_styles)

            if args.pretty and not color:
                continue
            plots[ds_name] = (color, style, eff, rej)

    out_dir = args.output_dir
    if not os.path.isdir(out_dir):
        os.mkdir(out_dir)

    out_base='roc.{}'.format(args.ext.lstrip('.'))
    outname = os.path.join(out_dir, out_base)
    pllist = [(x, y[0], y[1], y[2], y[3]) for x, y in plots.items()]
    draw_btag_roc(sorted(pllist), outname)

def _get_roc_xy(eff_ds, rej_ds, rev=False, mineff=0.3):
    sl = slice(None,None,-1) if not rev else slice(None)
    eff_array = np.asarray(eff_ds)[sl].cumsum()
    eff_array /= eff_array.max()
    rej_array = np.asarray(rej_ds)[sl].cumsum()
    rej_array /= rej_array.max()
    valid = (eff_array > mineff)
    valid &= (rej_array != 0)
    valid &= (eff_array != 1)
    eff_array = eff_array[valid]
    rej_array = rej_array[valid]
    rej_array = rej_array**(-1)
    # print(len(rej_array), len(valid))
    return eff_array, rej_array

def _setup_ax(ax, textsize=16):
    ax.set_yscale('log')
    ax.grid(which='both', linestyle='-', alpha=0.1)
    ax.tick_params(labelsize=textsize, which='both')

def draw_btag_roc(legdic, out_name):
    textsize = 16
    fig = Figure(figsize=(8,6))
    canvas = FigureCanvas(fig)
    ax = fig.add_subplot(1,1,1)
    _setup_ax(ax)

    for (leg, color, style, eff, rej) in legdic:
        opts = dict(lw=4)
        opts['color'] = color
        opts['linestyle'] = style
        label = _labels.get(leg, leg)
        ax.plot(eff, rej, label=label, **opts)

    out_dir = os.path.dirname(out_name)
    if out_dir and not os.path.isdir(out_dir):
        os.mkdir(out_dir)
    ax.legend(framealpha=0, ncol=2, prop=dict(size=8))
    ax.set_ylim(1, 1e3)
    ax.set_xlabel('$b$-tagging Efficiency', x=0.98, ha='right', size=textsize)
    ax.set_ylabel('Light Jet Rejection', y=0.98, ha='right', size=textsize)
    canvas.print_figure(out_name, bbox_inches='tight')

if __name__ == '__main__':
    run()
