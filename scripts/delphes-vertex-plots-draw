#!/usr/bin/env python3

import os, sys
import numpy as np
import h5py
import argparse
import math
from delphes.plotutils import FauxLogLocator, get_axes, fauxify

from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
# from matplotlib.ticker import FuncFormatter

def _get_args():
    d = 'default: %(default)s'
    parser = argparse.ArgumentParser()
    parser.add_argument('input_file')
    parser.add_argument('output_dir', nargs='?', default='test')
    parser.add_argument('-e', '--ext', default='pdf', help=d)
    args = parser.parse_args()
    return args

_alias = dict(st=r'\sqrt{\sin \theta}')
_ptdef = {'low': r'$0.4 < p_{{\rm T}} {st} < 0.5$'.format(**_alias),
          'high': r'$p_{{\rm T}} {st} > 20$ GeV'.format(**_alias)}
_pt = r'$p_{\rm T}$'
_ax_size = 12
_text_size = 12
_dphi = r'$\Delta \phi$'

def run():
    args = _get_args()

    with h5py.File(args.input_file, 'r') as h5file:
        fp = h5file['planes_by_flavor']
        charm = _get_all_arrays(fp, 4)
        bottom = _get_all_arrays(fp, 5)
        others = [_get_all_arrays(fp, x) for x in fp if x not in '45']

    # get a dict of axis properties
    axes_dict = {n: a[1] for n, a in charm.items()}

    # get dicts of the form {name: array, ...}
    charm_dict = {n: a[0] for n, a in charm.items()}
    bottom_dict = {n: a[0] for n, a in bottom.items()}
    others_dict = {n: a[0] for n, a in others[0].items()}
    for other in others[1:]:
        for pl_name, (arr, axes) in other.items():
            others_dict[pl_name] += arr

    def opath(base):
        out_name = base + '.' + args.ext.lstrip('.')
        return os.path.join(args.output_dir, out_name)

    all_plot_names = list(charm_dict)
    projected = set()
    for plname in all_plot_names:
        rgb = bottom_dict[plname], charm_dict[plname], others_dict[plname]
        draw_rgb(*rgb, axes=axes_dict[plname], out_path=opath(plname))
        xax = plname.split('_')[1]
        if xax not in projected:
            print(xax)
            draw_xproj(*rgb, axis=axes_dict[plname][1], out_path=opath(xax),
                       norm=True)
            log_name = opath(xax + '_log')
            draw_xproj(*rgb, axis=axes_dict[plname][1], out_path=log_name,
                       log=True)
            projected.add(xax)



def nth_largest(array, n):
    # check for float, if that's what it is, treat it as a fraction of
    # array length
    if n % 1 != 0:
        n = math.ceil(len(array) * n)
    return np.sort(array.flatten())[-n]


def _get_all_arrays(fp, label):
    """ return a dict of {name: (numpy_array, [axis, ...]), ...} """
    lab = str(label)
    return {n:(np.array(a), get_axes(a)) for n, a in fp[lab].items()}

def draw_rgb(red, green, blue, axes, out_path):
    rgb = np.dstack([red, green, blue])
    # crop off overflow
    rgb = rgb[1:-1, 1:-1,:]
    rgb = np.log1p(rgb)
    for iii in range(rgb.shape[2]):
        maxval = nth_largest(rgb[:,:,iii], 2)
        rgb[:,:,iii] = np.minimum(rgb[:,:,iii] / maxval, 1)
    fig = Figure(figsize=(5.0,5.0*3/4))
    canvas = FigureCanvas(fig)
    ax = fig.add_subplot(1,1,1)
    xlims, ylims = axes[0].lims, axes[1].lims
    imextent = list(xlims) + list(ylims)
    # transpose arrays so they draw properly (weird property of imshow)
    ax.imshow(rgb.swapaxes(0,1), interpolation='nearest',
              origin='lower', extent=imextent, aspect='auto')
    ax.set_xlim(*xlims)
    ax.set_ylim(*ylims)
    _label_axes(ax, axes)
    out_dir, out_file = os.path.split(out_path)
    if not os.path.isdir(out_dir):
        os.mkdir(out_dir)
    canvas.print_figure(out_path, bbox_inches='tight')

_def_leg = dict(red='bottom', green='charm', blue='light')
def draw_xproj(red, green, blue, axis, out_path, log=False, norm=False,
               leg=_def_leg):
    rgb = np.dstack([red, green, blue]).sum(axis=0)
    # crop off overflow
    rgb = rgb[1:-1,:]

    fig = Figure(figsize=(5.0,5.0*3/4))
    canvas = FigureCanvas(fig)
    ax = fig.add_subplot(1,1,1)
    xlims = axis.lims
    x_vals = np.linspace(*xlims, num=(rgb.shape[0] + 1))
    y_lab = 'jets'
    y_max = 0
    # plot the stuff
    for y_vals, color in zip(rgb.T, ['red','green','blue']):
        if norm:
            y_vals /= y_vals.sum()
            y_lab = 'fraction of jets'
        ax.plot(x_vals, np.r_[y_vals, y_vals[-1]],
                color=color, drawstyle='steps-post',
                label=leg[color])
        y_max = max(y_max, nth_largest(y_vals, 2))
    ax.set_xlim(*xlims)
    xunit = fauxify(ax.get_xaxis(), axis.units, minval=0.1)
    xname = axis.name
    ax.set_xlabel(axis_name(axis, xunit), x=0.98, ha='right', size=_ax_size)
    ax.set_ylabel(y_lab, y=0.98, ha='right', size=_ax_size)

    if log:
        ax.set_ylim(0.01 if norm else 1, ax.get_ylim()[1])
        ax.set_yscale('log')
    else:
        ax.set_ylim(0, y_max*1.2)
    ax.legend(frameon=False)

    out_dir, out_file = os.path.split(out_path)
    if not os.path.isdir(out_dir):
        os.mkdir(out_dir)
    canvas.print_figure(out_path, bbox_inches='tight')

def axis_name(ax, units):
    nm, un = ax.name, units
    return '{} [{}]'.format(nm, un) if un else nm

def _label_axes(ax, axes, size=12):
    xunit = fauxify(ax.get_xaxis(), axes[0].units)
    yunit = fauxify(ax.get_yaxis(), axes[1].units)
    ax.set_xlabel(axis_name(axes[0], xunit), x=0.98, ha='right', size=size)
    ax.set_ylabel(axis_name(axes[1], yunit), y=0.98, ha='right', size=size)

def _add_legend(ax):
    rgb_patch = [Patch(color=x) for x in 'rgb']
    bcl_names = [r'$b$', r'$c$', r'$\rm light$']
    title = 'Jet Flavor'
    ax.legend(rgb_patch, bcl_names, loc='lower left', fancybox=True,
              borderaxespad=0.2, title=title,
              labelspacing=0.2, handlelength=1.0)



if __name__ == '__main__':
    run()
