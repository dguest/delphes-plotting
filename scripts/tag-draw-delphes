#!/usr/bin/env python3

import os, sys
import numpy as np
import h5py

from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
# from matplotlib.ticker import FuncFormatter

def run():
    h5f = h5py.File(sys.argv[1])
    all_jets = h5f['all_jets']
    b_jets = h5f['b_jets']
    light_jets = h5f['light_jets']
    leading_b = h5f['leading_track_b']
    leading_light = h5f['leading_track_light']
    def three_flavor(variable):
        legs = [x.format(variable) for x in ['all {}', 'b {}', 'light {}']]
        datasets = [x[variable] for x in [all_jets, b_jets, light_jets]]
        return zip(legs, datasets)
    def leading(variable):
        legs = [x.format(variable) for x in ['b {}', 'light {}']]
        datasets = [x[variable] for x in [leading_b, leading_light]]
        return zip(legs, datasets)

    d0_plots = [
        ('raw b',b_jets['particle_d0']),
        ('smeared b',b_jets['track_d0']),
        ('raw light.', light_jets['particle_d0']),
        ('smeared light', light_jets['track_d0']),
    ]
    _make_plot(d0_plots, 'd0_comp.pdf', 'd0', log=True)
    _make_plot(three_flavor('track_pt'), 'track_pt.pdf', _pt, log=True)
    # z0_plots = [('raw',all_jets['particle_z0']), ('smeared', all_jets['track_z0'])]
    # _make_plot(z0_plots, 'z0_comp.pdf', 'z0')
    # _make_plot([('tracks per jet', all_jets['n_tracks'])], 'n_tracks.pdf', 'n trk')
    _make_plot(three_flavor('track_d0sig'), 'd0sig.pdf', 'd0 sig', log=True)
    _make_plot(three_flavor('track_ipsig'), 'ipsig.pdf', 'ip sig', log=True)
    _make_plot([
        ('track ip', b_jets['track_ip']),
        ('track d0', b_jets['track_d0'])],
               'bjet_track_ipvsd0.pdf', 'disp')
    _make_plot(three_flavor('track_jet_dr'), 'trackjetdr.pdf', '$\Delta R$',
               log=True)
    _make_plot(leading('track_ip'), 'leading_ip.pdf', 'IP')
    _make_plot(leading('track_d0'), 'leading_d0.pdf', 'd0')
    _make_plot(leading('track_pt'), 'leading_pt.pdf', _pt, log=True)
    _make_plot([
        ('leading', leading_light['track_pt']),
        ('all', light_jets['track_pt'])],
               'pt_leading_vs_all.pdf', _pt, log=True)

_pt = r'$p_{\rm T}$'
_ax_size = 12
_text_size = 12

def _make_plot(names, outname, xname, log=False, outdir='plots', norm=False):
    """return the canvas with everything drawn on it"""
    y_lab = 'tracks'

    fig = Figure(figsize=(5.0, 5.0*3/4))
    canvas = FigureCanvas(fig)
    ax = fig.add_subplot(1,1,1)
    color_itr = iter(['black', 'red', 'blue', 'darkgreen'])
    units = set()
    for leg, dataset in names:
        extent = [dataset.attrs[x][0] for x in ['min', 'max']]
        yvals = np.array(dataset)[1:]
        xvals = np.linspace(*extent, num=(yvals.shape[0]))
        color = next(color_itr)
        if norm:
            yvals /= yvals[:-1].sum()
            y_lab = 'arb'
        ax.plot(xvals[:-1], yvals[:-1], drawstyle='steps-post', label=leg, color=color)
        units.add(dataset.attrs['units'][0])
    assert len(units) == 1, "incompatible units: {}".format(units)

    xlab = '{} [{}]'.format(xname, units.pop())
    ax.set_xlabel(xlab, x=0.98, ha='right', size=_ax_size)
    ax.set_ylabel(y_lab, y=0.98, ha='right', size=_ax_size)
    ax.set_xlim(*extent)
    if log:
        ax.set_ylim(0.01 if norm else 1, ax.get_ylim()[1])
        ax.set_yscale('log')
    ax.legend(framealpha=0, prop=dict(size=_text_size))
    if not os.path.isdir(outdir):
        os.mkdir(outdir)
    canvas.print_figure(os.path.join(outdir,outname), bbox_inches='tight')

if __name__ == '__main__':
    run()
